@model CourseManagement.Core.ViewModels.ContentViewModel;

@{
    ViewData["Title"] = "Nội dung bài học";
    Layout = "_Layout";
}

<style>
    .lesson-content-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .lesson-header {
        background: linear-gradient(135deg, #6e8efb, #a777e3);
        border-radius: 10px;
        padding: 2rem;
        margin-bottom: 2rem;
        color: white;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }

    .content-card {
        background-color: white;
        border-radius: 10px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
        opacity: 0;
        transform: translateY(20px);
    }

    .content-card.animated {
        opacity: 1;
        transform: translateY(0);
    }

    .card-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: #333;
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid #f0f0f0;
    }

    .card-content, .summary-section {
        font-size: 1.1rem;
        line-height: 1.7;
        color: #444;
    }

    .summary-section {
        background-color: #f9f7ff;
        border-left: 4px solid #a777e3;
        padding: 1.5rem;
        border-radius: 0 10px 10px 0;
        margin-top: 0.5rem;
    }

    .back-button {
        display: inline-flex;
        align-items: center;
        padding: 0.75rem 1.5rem;
        background-color: #6e8efb;
        color: white;
        border-radius: 30px;
        text-decoration: none;
        font-weight: 600;
        margin-top: 1rem;
        border: none;
        cursor: pointer;
    }

    .back-button:hover {
        background-color: #5d7df7;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(110, 142, 251, 0.4);
    }

    .content-placeholder {
        height: 300px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #f9f9f9;
        border-radius: 10px;
        color: #888;
    }

    .loader {
        border: 5px solid #f3f3f3;
        border-top: 5px solid #6e8efb;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 1s linear infinite;
        margin: 2rem auto;
    }

    .editable[contenteditable="true"] {
        border: 1px dashed #ccc;
        background: #fdfdfd;
    }

    .btn-sm {
        padding: 0.3rem 0.7rem;
        font-size: 0.85rem;
        margin-right: 0.3rem;
    }
</style>

<a href="javascript:history.back()" class="back-button">
    <i class="fas fa-arrow-left pe-2"></i> Quay lại
</a>

<div class="lesson-content-container">
    <div class="lesson-header">
        <h1 id="lessonTitle">Đang tải nội dung bài học...</h1>
    </div>

    <div id="contentContainer">
        <div class="content-card">
            <div class="loader"></div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            const lessonId = '@Model.LessonId';

            if (!lessonId) {
                showError("Không tìm thấy thông tin bài học");
                return;
            }

           $.ajax({
               url: '@Url.Action("GetVideosByLessonId", "Video", new { area = "Video" })' + `?lessonId=${lessonId}`,
               type: "GET",
               success: function (res) {
                    const list = res.data || [];
                    const container = $("#videoListContainer");
                    container.empty();

                    if (list.length === 0) {
                        container.html("<p>Chưa có video nào.</p>");
                        return;
                    }

                    list.forEach(video => {
                        const videoHtml = `
                        <div class="mb-4">
                            <h5>${video.title}</h5>
                            <video controls width="100%" style="border-radius: 10px;">
                                <source src="@Url.Action("StreamLessonVideo", "Video", new { area = "Video" })/${video.videoId}" type="video/mp4">
                                Trình duyệt không hỗ trợ video HTML5.
                            </video>
                        </div>
            `;
                        container.append(videoHtml);
                    });
               },
               error: function () {
                   $("#videoListContainer").html("<p class='text-danger'>Không thể tải danh sách video.</p>");
               },
           });

            $.ajax({
                url: '@Url.Action("GetDocumentsByLessonId", "Document", new { area = "Document" })' + `?lessonId=${lessonId}`,
                type: "GET",
                success: function (res) {
                    const list = res.data || [];
                    const container = $("#documentListContainer");
                    container.empty();

                    if (list.length === 0) {
                        container.html("<p>Chưa có tài liệu nào.</p>");
                        return;
                    }

                    list.forEach(doc => {
                        const item = `<div class='mb-2'><a href='@Url.Action("DownloadDocument","Document", new { area = "Document" })/${doc.documentId}' class='btn btn-link'>${doc.title}</a></div>`;
                        container.append(item);
                    });
                },
                error: function () {
                    $("#documentListContainer").html("<p class='text-danger'>Không thể tải danh sách tài liệu.</p>");
                }
            });


            $.get('@Url.Action("GetLessonById", "Lesson")', {id: lessonId})
                .done(function (res) {
                    if (res && res.data) {
                        $("#lessonTitle").text(res.data.title);
                    } else {
                        showError("Không thể tải thông tin bài học");
                    }
                })
                .fail(function () {
                    showError("Không thể tải thông tin bài học");
                });

            $.get('@Url.Action("GetContentByLessonId", "LessonContent", new { area = "LessonContent" })', {id: lessonId})
                .done(function (res) {
                    if (res) renderContent(res);
                    else showNoContent();
                })
                .fail(function () {
                    showError("Không thể tải nội dung bài học");
                });

            function renderContent(contentData) {
                const container = $("#contentContainer");
                container.empty();

                const sections = [
                    {label: "Tóm tắt", type: "summary", content: contentData.summary || "Chưa có nội dung"},
                    {
                        label: "Nội dung bài học",
                        type: "mainContent",
                        content: contentData.mainContent || "Chưa có nội dung"
                    },
                    {label: "Tài liệu đính kèm", type: "document", content: "<div id='documentListContainer'><div class='loader'></div></div>"},
                    {
                        label: "Video bài học",
                        type: "video",
                        content: "<div id='videoListContainer'><div class='loader'></div></div>"
                    }
                ];

                sections.forEach(section => {
                    const html = `
                        <div class="content-card animated">
                            <h2 class="card-title">${section.label}</h2>
                            <div class="card-content editable" 
                                 data-type="${section.type}" 
                                 contenteditable="false">${section.content}</div>
                            <div class="mt-2">
                                <button class="btn btn-sm btn-primary btn-edit" data-type="${section.type}">Edit</button>
                                <button class="btn btn-sm btn-success btn-save d-none" data-type="${section.type}">Save</button>
                                <button class="btn btn-sm btn-danger btn-delete d-none" data-type="${section.type}">Delete</button>
                                <button class="btn btn-sm btn-secondary btn-cancel d-none" data-type="${section.type}">Cancel</button>
                            </div>
                        </div>`;
                    container.append(html);
                });
            }

            function showNoContent() {
                $("#contentContainer").html(`
                    <div class="content-card animated">
                        <div class="content-placeholder"><p>Chưa có nội dung cho bài học này</p></div>
                    </div>
                `);
            }

            function showError(message) {
                $("#contentContainer").html(`
                    <div class="content-card animated">
                        <div class="content-placeholder text-danger">
                            <p><i class="fas fa-exclamation-circle me-2"></i> ${message}</p>
                        </div>
                    </div>
                `);
                $("#lessonTitle").text("Lỗi");
            }

            $(document).on("click", ".btn-edit", function () {
                const type = $(this).data("type");
                const editable = $(`.editable[data-type="${type}"]`);
                editable.attr("contenteditable", "true").focus();

                // Lưu giá trị ban đầu
                editable.data("original", editable.html());

                $(this).addClass("d-none");
                $(`.btn-save[data-type="${type}"], .btn-delete[data-type="${type}"], .btn-cancel[data-type="${type}"]`).removeClass("d-none");
            });

            $(document).on("click", ".btn-cancel", function () {
                const type = $(this).data("type");
                const editable = $(`.editable[data-type="${type}"]`);
                const original = editable.data("original");

                // Khôi phục nội dung
                editable.html(original).attr("contenteditable", "false");

                // Ẩn Save/Delete/Cancel, hiện Edit
                $(`.btn-save[data-type="${type}"], .btn-delete[data-type="${type}"], .btn-cancel[data-type="${type}"]`).addClass("d-none");
                $(`.btn-edit[data-type="${type}"]`).removeClass("d-none");
            });

            $(document).on("click", ".btn-save", function () {
                const type = $(this).data("type");
                const editable = $(`.editable[data-type="${type}"]`);
                const newValue = editable.html();

                console.log("Saving:", type, newValue); // Thay bằng gọi API thực tế nếu cần

                editable.attr("contenteditable", "false");
                $(`.btn-save[data-type="${type}"], .btn-delete[data-type="${type}"], .btn-cancel[data-type="${type}"]`).addClass("d-none");
                $(`.btn-edit[data-type="${type}"]`).removeClass("d-none");
            });

            $(document).on("click", ".btn-delete", function () {
                const type = $(this).data("type");
                const editable = $(`.editable[data-type="${type}"]`);
                editable.html("[Đã xóa]").attr("contenteditable", "false");

                $(`.btn-save[data-type="${type}"], .btn-delete[data-type="${type}"], .btn-cancel[data-type="${type}"]`).addClass("d-none");
                $(`.btn-edit[data-type="${type}"]`).removeClass("d-none");
            });
        });
        $(document).on("click", ".btn-save", function () {
            const type = $(this).data("type");
            const editable = $(`.editable[data-type="${type}"]`);
            const newValue = editable.html().trim();
            const lessonId = '@Model.LessonId';

            let url = "";
            let payload = {};

            switch (type) {
                case "summary":
                    url = "/LessonContent/LessonContent/UpdateSummary";
                    payload = {id: lessonId, summary: newValue};
                    break;
                case "mainContent":
                    url = "/LessonContent/LessonContent/UpdateMainContent";
                    payload = {id: lessonId, mainContent: newValue};
                    break;
                // Nếu bạn sau này có UpdateDocument / UpdateVideo:
                case "document":
                    toastr.warning("Tính năng cập nhật tài liệu chưa được hỗ trợ.");
                    return;
                case "video":
                    toastr.warning("Tính năng cập nhật video chưa được hỗ trợ.");
                    return;
                default:
                    toastr.error("Loại nội dung không xác định.");
                    return;
            }

            $.ajax({
                url: url,
                type: "POST",
                data: payload,
                success: function (res) {
                    if (res.success) {
                        toastr.success(res.message || "Cập nhật thành công");
                        editable.attr("contenteditable", "false");
                        $(`.btn-edit[data-type='${type}']`).removeClass("d-none");
                        $(`.btn-save[data-type='${type}'], .btn-delete[data-type='${type}'], .btn-cancel[data-type='${type}']`).addClass("d-none");
                    } else {
                        toastr.error(res.message || "Cập nhật thất bại");
                    }
                },
                error: function () {
                    toastr.error("Lỗi máy chủ. Không thể cập nhật.");
                }
            });
        });

    </script>
}
    